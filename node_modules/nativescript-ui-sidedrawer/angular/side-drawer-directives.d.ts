import { ElementRef, TemplateRef, EmbeddedViewRef, ViewContainerRef, EventEmitter } from "@angular/core";
import { RadSideDrawer } from "./..";
import { View } from "tns-core-modules/ui/core/view";
import { Page } from "tns-core-modules/ui/page";
import sideDrawerModule = require('./..');
export declare type SideDrawerType = RadSideDrawer & View & {
    toggleDrawerState: () => void;
};
export interface ItemEventArgs {
    object: any;
    view: EmbeddedViewRef<any>;
    returnValue?: boolean;
}
export declare class RadSideDrawerComponent {
    elementRef: ElementRef;
    private page;
    private viewContainer;
    sideDrawer: RadSideDrawer;
    mainTemplate: TemplateRef<ElementRef>;
    drawerTemplate: TemplateRef<ElementRef>;
    private _drawerContentSize;
    private _showOverNavigation;
    private _gesturesEnabled;
    private _drawerTransition;
    private _drawerLocation;
    private sideDrawerMovedToPage;
    drawerOpening: EventEmitter<any>;
    drawerOpen: EventEmitter<any>;
    drawerClosing: EventEmitter<any>;
    drawerClosed: EventEmitter<any>;
    transition: sideDrawerModule.DrawerTransitionBase;
    constructor(elementRef: ElementRef, page: Page, viewContainer: ViewContainerRef);
    readonly nativeElement: RadSideDrawer;
    drawerContentSize: number;
    showOverNavigation: boolean;
    gesturesEnabled: boolean;
    drawerTransition: string;
    drawerLocation: string;
    private updateDrawerLocation();
    private updateDrawerTransition();
    private updateGesturesEnabled();
    private updateShowOverNavigation();
    private updateContentSize();
}
export declare class TKDrawerContentDirective {
    private _elementRef;
    constructor(_elementRef: ElementRef);
}
export declare class TKMainContentDirective {
    private _elementRef;
    constructor(_elementRef: ElementRef);
}
export declare const SIDEDRAWER_DIRECTIVES: (typeof RadSideDrawerComponent | typeof TKDrawerContentDirective | typeof TKMainContentDirective)[];
export declare class NativeScriptUISideDrawerModule {
}
